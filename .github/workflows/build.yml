# GitHub Actions Workflow is created for testing and preparing the plugin release in the following steps:
# - Validate Gradle Wrapper.
# - Run 'test' and 'verifyPlugin' tasks.
# - Run the 'buildPlugin' task and prepare artifact for further tests.
# - Run the 'runPluginVerifier' task.
#
# The workflow is triggered on push and pull_request events.
#
# GitHub Actions reference: https://help.github.com/en/actions
#
## JBIJPPTPL

name: Build
on:
  push:
  pull_request:

concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: true

jobs:

  # Prepare environment and build the plugin
  build:
    name: Build
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.properties.outputs.version }}
      changelog: ${{ steps.properties.outputs.changelog }}
      pluginVerifierHomeDir: ${{ steps.properties.outputs.pluginVerifierHomeDir }}
    steps:

      # Check out the current repository
      - name: Fetch Sources
        uses: actions/checkout@v4

      # Validate wrapper
      - name: Gradle Wrapper Validation
        uses: gradle/actions/wrapper-validation@v3

      # Set up Java environment for the next steps
      - name: Setup Java
        uses: actions/setup-java@v4
        with:
          distribution: zulu
          java-version: 17

      # Setup Gradle
      - name: Setup Gradle
        uses: gradle/actions/setup-gradle@v4

      # Build plugin
      - name: Build plugin
        run: ./gradlew buildPlugin

      # Prepare plugin archive content for creating artifact
      - name: Prepare Plugin Artifact
        id: artifact
        shell: bash
        run: |
          cd ${{ github.workspace }}/build/distributions
          FILENAME=`ls *.zip`
          unzip "$FILENAME" -d content

          echo "filename=${FILENAME:0:-4}" >> $GITHUB_OUTPUT

      # Store already-built plugin as an artifact for downloading
      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ steps.artifact.outputs.filename }}
          path: ./build/distributions/content/*/*

  # Run tests and upload a code coverage report
#  test:
#    name: Test
#    needs: [ build ]
#    runs-on: ubuntu-latest
#    steps:
#
#      # Check out the current repository
#      - name: Fetch Sources
#        uses: actions/checkout@v4
#
#      # Set up Java environment for the next steps
#      - name: Setup Java
#        uses: actions/setup-java@v4
#        with:
#          distribution: zulu
#          java-version: 17
#
#      # Setup Gradle
#      - name: Setup Gradle
#        uses: gradle/actions/setup-gradle@v4
#
#      # Run tests
#      - name: Run Tests
#        run: ./gradlew check
#
#      # Collect Tests Result of failed tests
#      - name: Collect Tests Result
#        if: ${{ failure() }}
#        uses: actions/upload-artifact@v4
#        with:
#          name: tests-result
#          path: ${{ github.workspace }}/build/reports/tests
#
#      # Upload the Kover report to CodeCov
#      - name: Upload Code Coverage Report
#        uses: codecov/codecov-action@v4
#        with:
#          files: ${{ github.workspace }}/build/reports/kover/report.xml
#
#  # Run plugin structure verification along with IntelliJ Plugin Verifier
#  verify:
#    name: Verify plugin
#    needs: [ build ]
#    runs-on: ubuntu-latest
#    steps:
#
#      # Free GitHub Actions Environment Disk Space
#      - name: Maximize Build Space
#        uses: jlumbroso/free-disk-space@main
#        with:
#          tool-cache: false
#          large-packages: false
#
#      # Check out the current repository
#      - name: Fetch Sources
#        uses: actions/checkout@v4
#
#      # Set up Java environment for the next steps
#      - name: Setup Java
#        uses: actions/setup-java@v4
#        with:
#          distribution: zulu
#          java-version: 17
#
#      # Setup Gradle
#      - name: Setup Gradle
#        uses: gradle/actions/setup-gradle@v4
#
#      # Cache Plugin Verifier IDEs
#      - name: Setup Plugin Verifier IDEs Cache
#        uses: actions/cache@v4
#        with:
#          path: ${{ needs.build.outputs.pluginVerifierHomeDir }}/ides
#          key: plugin-verifier-${{ hashFiles('build/listProductsReleases.txt') }}
#
#      # Run Verify Plugin task and IntelliJ Plugin Verifier tool
#      - name: Run Plugin Verification tasks
#        run: ./gradlew verifyPlugin -Dplugin.verifier.home.dir=${{ needs.build.outputs.pluginVerifierHomeDir }}
#
#      # Collect Plugin Verifier Result
#      - name: Collect Plugin Verifier Result
#        if: ${{ always() }}
#        uses: actions/upload-artifact@v4
#        with:
#          name: pluginVerifier-result
#          path: ${{ github.workspace }}/build/reports/pluginVerifier
